/**
 * VisualizationPanel Component
 *
 * Displays visualizations generated by agents (charts, graphs, tables).
 */

import { useState } from 'react';
import { type VisualizationEvent } from '../../services/streaming';

interface VisualizationPanelProps {
  visualizations: VisualizationEvent[];
}

export function VisualizationPanel({ visualizations }: VisualizationPanelProps) {
  const [selectedIndex, setSelectedIndex] = useState(0);

  if (visualizations.length === 0) return null;

  const currentViz = visualizations[selectedIndex];

  return (
    <div className="h-full flex flex-col">
      {/* Header */}
      <div className="flex-none px-6 py-4 border-b border-gray-200">
        <h2 className="text-lg font-semibold text-gray-900">Visualizations</h2>
        <p className="text-sm text-gray-500 mt-1">
          {visualizations.length} {visualizations.length === 1 ? 'chart' : 'charts'} generated
        </p>
      </div>

      {/* Visualization Tabs */}
      {visualizations.length > 1 && (
        <div className="flex-none border-b border-gray-200 overflow-x-auto">
          <div className="flex px-6">
            {visualizations.map((viz, index) => (
              <button
                key={`viz-tab-${index}`}
                onClick={() => setSelectedIndex(index)}
                className={`px-4 py-3 text-sm font-medium border-b-2 transition-colors ${
                  index === selectedIndex
                    ? 'border-blue-600 text-blue-600'
                    : 'border-transparent text-gray-600 hover:text-gray-900'
                }`}
              >
                {viz.title}
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Visualization Content */}
      <div className="flex-1 overflow-y-auto px-6 py-6">
        <div className="bg-white rounded-lg border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            {currentViz.title}
          </h3>

          <VisualizationRenderer
            type={currentViz.type}
            data={currentViz.data}
            config={currentViz.config}
          />

          <p className="text-xs text-gray-500 mt-4">
            Generated: {new Date(currentViz.timestamp).toLocaleString()}
          </p>
        </div>
      </div>
    </div>
  );
}

interface VisualizationRendererProps {
  type: string;
  data: any;
  config: any;
}

function VisualizationRenderer({ type, data, config }: VisualizationRendererProps) {
  // Placeholder renderers - will be replaced with actual chart components
  switch (type) {
    case 'pie_chart':
      return <PieChartPlaceholder data={data} config={config} />;

    case 'line_chart':
      return <LineChartPlaceholder data={data} config={config} />;

    case 'bar_chart':
      return <BarChartPlaceholder data={data} config={config} />;

    case 'fan_chart':
      return <FanChartPlaceholder data={data} config={config} />;

    case 'table':
      return <TableRenderer data={data} config={config} />;

    default:
      return <JsonRenderer data={data} />;
  }
}

// Simple chart components using HTML/CSS (no external library needed)
function PieChartPlaceholder({ data }: { data: any; config: any }) {
  // Calculate total and percentages
  const entries = Object.entries(data);
  const total = entries.reduce((sum, [_, value]) => sum + (Number(value) || 0), 0);

  // Colors for segments
  const colors = [
    '#3B82F6', // blue-500
    '#10B981', // green-500
    '#F59E0B', // amber-500
    '#EF4444', // red-500
    '#8B5CF6', // violet-500
    '#EC4899', // pink-500
  ];

  return (
    <div className="space-y-4">
      {/* Legend */}
      <div className="space-y-2">
        {entries.map(([label, value], index) => {
          const percentage = total > 0 ? ((Number(value) / total) * 100).toFixed(1) : 0;
          return (
            <div key={label} className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <div
                  className="w-3 h-3 rounded-full"
                  style={{ backgroundColor: colors[index % colors.length] }}
                />
                <span className="text-sm text-gray-700">{label}</span>
              </div>
              <div className="text-right">
                <span className="text-sm font-medium text-gray-900">{percentage}%</span>
                <span className="text-xs text-gray-500 ml-2">${Number(value).toLocaleString()}</span>
              </div>
            </div>
          );
        })}
      </div>

      {/* Simple visual representation */}
      <div className="flex h-4 rounded-full overflow-hidden">
        {entries.map(([label, value], index) => {
          const percentage = total > 0 ? (Number(value) / total) * 100 : 0;
          return (
            <div
              key={label}
              className="transition-all"
              style={{
                width: `${percentage}%`,
                backgroundColor: colors[index % colors.length],
              }}
              title={`${label}: ${percentage.toFixed(1)}%`}
            />
          );
        })}
      </div>
    </div>
  );
}

function LineChartPlaceholder({ data }: { data: any; config: any }) {
  return (
    <div className="bg-gray-50 rounded-lg p-8 text-center">
      <svg className="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z" />
      </svg>
      <p className="text-sm font-medium text-gray-900">Line Chart</p>
      <p className="text-xs text-gray-500 mt-1">Portfolio growth over time</p>
      <pre className="mt-4 text-left text-xs bg-white p-4 rounded border border-gray-200 overflow-x-auto">
        {JSON.stringify(data, null, 2)}
      </pre>
    </div>
  );
}

function BarChartPlaceholder({ data }: { data: any; config: any }) {
  // Calculate max value for scaling
  const entries = Object.entries(data);
  const maxValue = Math.max(...entries.map(([_, value]) => Number(value) || 0));

  // Colors for bars
  const colors = [
    '#3B82F6', // blue-500
    '#10B981', // green-500
    '#F59E0B', // amber-500
    '#EF4444', // red-500
    '#8B5CF6', // violet-500
  ];

  return (
    <div className="space-y-3">
      {entries.map(([label, value], index) => {
        const percentage = maxValue > 0 ? (Number(value) / maxValue) * 100 : 0;
        return (
          <div key={label} className="space-y-1">
            <div className="flex items-center justify-between text-sm">
              <span className="text-gray-700 font-medium">{label}</span>
              <span className="text-gray-900">{Number(value)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-6 overflow-hidden">
              <div
                className="h-full rounded-full transition-all duration-500 flex items-center justify-end pr-2"
                style={{
                  width: `${percentage}%`,
                  backgroundColor: colors[index % colors.length],
                }}
              >
                {percentage > 20 && (
                  <span className="text-xs font-medium text-white">
                    {percentage.toFixed(0)}%
                  </span>
                )}
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );
}

function FanChartPlaceholder({ data }: { data: any; config: any }) {
  return (
    <div className="bg-gray-50 rounded-lg p-8 text-center">
      <svg className="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
      </svg>
      <p className="text-sm font-medium text-gray-900">Fan Chart</p>
      <p className="text-xs text-gray-500 mt-1">Monte Carlo simulation results</p>
      <pre className="mt-4 text-left text-xs bg-white p-4 rounded border border-gray-200 overflow-x-auto">
        {JSON.stringify(data, null, 2)}
      </pre>
    </div>
  );
}

function TableRenderer({ data }: { data: any; config: any }) {
  if (!Array.isArray(data) || data.length === 0) {
    return <JsonRenderer data={data} />;
  }

  const columns = Object.keys(data[0]);

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            {columns.map(col => (
              <th
                key={col}
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                {col}
              </th>
            ))}
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {columns.map(col => (
                <td key={col} className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {JSON.stringify(row[col])}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

function JsonRenderer({ data }: { data: any }) {
  return (
    <pre className="text-xs bg-gray-50 p-4 rounded border border-gray-200 overflow-x-auto">
      {JSON.stringify(data, null, 2)}
    </pre>
  );
}
