"""
Conversation thread database models
"""

from sqlalchemy import String, Text, ForeignKey, JSON, Enum as SQLEnum
from sqlalchemy.orm import Mapped, mapped_column, relationship
from typing import Optional, List
import uuid
import enum

from .base import Base, TimestampMixin, SoftDeleteMixin


class MessageRole(str, enum.Enum):
    """Message role types"""
    USER = "user"
    ASSISTANT = "assistant"
    SYSTEM = "system"


class Thread(Base, TimestampMixin, SoftDeleteMixin):
    """Conversation thread"""

    __tablename__ = "threads"

    # Primary key
    id: Mapped[str] = mapped_column(
        String(36),
        primary_key=True,
        default=lambda: str(uuid.uuid4())
    )

    # Foreign keys
    user_id: Mapped[str] = mapped_column(
        String(36),
        ForeignKey("users.id", ondelete="CASCADE"),
        nullable=False,
        index=True
    )

    # Thread metadata
    title: Mapped[str] = mapped_column(String(255), nullable=False)

    # Goal types discussed in this thread (stored as JSON array)
    goal_types: Mapped[Optional[List[str]]] = mapped_column(JSON, nullable=True)

    # Thread summary (generated by AI)
    summary: Mapped[Optional[str]] = mapped_column(Text, nullable=True)

    # Relationships
    user: Mapped["User"] = relationship("User", back_populates="threads")

    messages: Mapped[List["Message"]] = relationship(
        "Message",
        back_populates="thread",
        cascade="all, delete-orphan",
        order_by="Message.created_at"
    )

    analyses: Mapped[List["Analysis"]] = relationship(
        "Analysis",
        back_populates="thread",
        cascade="all, delete-orphan"
    )

    def __repr__(self) -> str:
        return f"<Thread(id={self.id}, title={self.title})>"


class Message(Base, TimestampMixin):
    """Message within a conversation thread"""

    __tablename__ = "messages"

    # Primary key
    id: Mapped[str] = mapped_column(
        String(36),
        primary_key=True,
        default=lambda: str(uuid.uuid4())
    )

    # Foreign keys
    thread_id: Mapped[str] = mapped_column(
        String(36),
        ForeignKey("threads.id", ondelete="CASCADE"),
        nullable=False,
        index=True
    )

    # Message content
    role: Mapped[MessageRole] = mapped_column(
        SQLEnum(MessageRole),
        nullable=False
    )

    content: Mapped[str] = mapped_column(Text, nullable=False)

    # Agent information (if message is from an agent)
    agent_id: Mapped[Optional[str]] = mapped_column(String(100), nullable=True)
    agent_name: Mapped[Optional[str]] = mapped_column(String(100), nullable=True)

    # Message metadata (stored as JSON)
    msg_metadata: Mapped[Optional[dict]] = mapped_column("metadata", JSON, nullable=True)

    # Relationships
    thread: Mapped["Thread"] = relationship("Thread", back_populates="messages")

    def __repr__(self) -> str:
        return f"<Message(id={self.id}, role={self.role}, thread_id={self.thread_id})>"
